{"version":3,"sources":["webpack://@fof/nightmode/webpack/bootstrap","webpack://@fof/nightmode/./src/common/config.js","webpack://@fof/nightmode/external \"flarum.core.compat['extend']\"","webpack://@fof/nightmode/external \"flarum.core.compat['tags/components/TagsPage']\"","webpack://@fof/nightmode/external \"flarum.core.compat['app']\"","webpack://@fof/nightmode/external \"flarum.core.compat['components/SettingsPage']\"","webpack://@fof/nightmode/external \"flarum.core.compat['components/LoadingIndicator']\"","webpack://@fof/nightmode/external \"flarum.core.compat['components/Select']\"","webpack://@fof/nightmode/external \"flarum.core.compat['components/FieldSet']\"","webpack://@fof/nightmode/external \"flarum.core.compat['components/Switch']\"","webpack://@fof/nightmode/external \"flarum.core.compat['components/Page']\"","webpack://@fof/nightmode/./src/forum/fixInvalidThemeSetting.js","webpack://@fof/nightmode/./src/forum/getTheme.js","webpack://@fof/nightmode/./src/forum/setSelectedTheme.js","webpack://@fof/nightmode/./src/forum/addSettingsItems.js","webpack://@fof/nightmode/./src/forum/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Themes","AUTO","LIGHT","DARK","DEFAULT","app","forum","data","attributes","Constants","localStorageKey","flarum","core","compat","LocalStorageKey","fixInvalidThemeSetting","validValues","Array","from","Set","values","wasInvalid","parseInt","localStorage","getItem","error","console","warn","setItem","isNaN","includes","GetTheme","user","preferences","fofNightMode_perDevice","fofNightMode_themeType","fofNightMode","preMigration","migrated","savePreferences","SetTheme","session","SetThemeFromID","theme","setAuto","setLight","setDark","window","matchMedia","matches","$","removeClass","addClass","extend","SettingsPage","items","PerDevice","CurrentTheme","add","FieldSet","component","label","translator","trans","className","children","Switch","state","onchange","checked","then","Select","e","redraw","options","LoadingIndicator","initializers","addSettingsItems","Page","TagsPage"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","/*\n\n    JS enum equivalent. Makes sure no value mix-ups are made!\n\n    DEFAULT is used when an invalid value has been set, as well as for guest and new users.\n\n*/\n\nconst Themes = {\n    AUTO: 0,\n    LIGHT: 1,\n    DARK: 2,\n\n    DEFAULT: (app) => app.forum.data.attributes[\"fof-nightmode_default_theme\"],\n};\n\nconst Constants = {\n    localStorageKey: `fofNightMode_deviceTheme`,\n};\n\nexport default Themes;\n\nexport { Themes, Constants };\n","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['tags/components/TagsPage'];","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['components/SettingsPage'];","module.exports = flarum.core.compat['components/LoadingIndicator'];","module.exports = flarum.core.compat['components/Select'];","module.exports = flarum.core.compat['components/FieldSet'];","module.exports = flarum.core.compat['components/Switch'];","module.exports = flarum.core.compat['components/Page'];","/*\n    This function is designed to catch invalid theme values\n    and handle them before they can break Flarum for users.\n\n    E.g. if a user manually edited their local storage to\n    set their theme to an invalid value, this theme would\n    detect that, and reset it to 0 (auto).\n\n    I'm sure there are still cases where users can break this\n    (maybe faking XHRs to Flarum and setting their user prefs\n    to use an invalid value) bt those are extremes which\n    wouldn't happen unless someone's being an idiot. If someone\n    if being an idiot, they deserve to lose Flarum .\n\n    :)\n\n    ---\n\n    David Wheatley\n    GitHub: davwheat || giffgaff: mrjeeves\n    (not a giffgaff employee, though)\n*/\n\nimport { Themes, Constants } from \"../common/config\";\n\nconst LocalStorageKey = Constants.localStorageKey;\n\nexport default function fixInvalidThemeSetting() {\n    // get array of valid values without duplicate entries\n    let validValues = Array.from(new Set(Object.values(Themes)));\n\n    let wasInvalid = false;\n    let t;\n\n    try {\n        t = parseInt(localStorage.getItem(LocalStorageKey));\n    } catch (error) {\n        console.warn(\"Theme is not a valid integer! Resetting... (1)\");\n        localStorage.setItem(LocalStorageKey, Themes.DEFAULT(app));\n        wasInvalid = true;\n    }\n\n    if (isNaN(t)) {\n        console.warn(\"Theme is not a valid integer! Resetting... (2)\");\n        localStorage.setItem(LocalStorageKey, Themes.DEFAULT(app));\n        wasInvalid = true;\n    }\n\n    if (!wasInvalid && !validValues.includes(t)) {\n        // theme out of bounds\n        console.warn(`Theme is out of bounds! Resetting...`);\n        localStorage.setItem(LocalStorageKey, Themes.DEFAULT(app));\n        wasInvalid = true;\n    }\n}\n","import { Themes, Constants } from \"../common/config\";\n\nexport default function GetTheme(user) {\n    const PerDevice = user.preferences().fofNightMode_perDevice\n        ? user.preferences().fofNightMode_perDevice\n        : false;\n\n    if (PerDevice) {\n        // fetch through LS is per device enabled\n        return parseInt(localStorage.getItem(Constants.localStorageKey));\n    } else {\n        if (typeof user.preferences().fofNightMode_themeType === \"number\") {\n            // use user prefs\n            return user.preferences().fofNightMode_themeType;\n        } else {\n            if (user.preferences().fofNightMode) {\n                // migrate previous preferences\n\n                const preMigration = user.preferences().fofNightMode;\n                let migrated = Themes.LIGHT;\n\n                if (preMigration === true) {\n                    // user selected dark before migration\n                    migrated = Themes.DARK;\n                }\n\n                user.savePreferences({\n                    fofNightMode: null,\n                    fofNightMode_themeType: migrated,\n                });\n\n                // assume the prefs will be saved correctly and just return what the value should have been\n                return migrated;\n            } else {\n                // user never set a pref\n\n                user.savePreferences({\n                    fofNightMode: null,\n                    fofNightMode_themeType: Themes.AUTO,\n                });\n\n                // assume the prefs will be saved correctly and just return default\n                return Themes.DEFAULT(app);\n            }\n        }\n    }\n}\n","import { extend } from \"flarum/extend\";\nimport TagsPage from \"flarum/tags/components/TagsPage\";\n\nimport Page from \"flarum/components/Page\";\nimport fixInvalidThemeSetting from \"./fixInvalidThemeSetting\";\n\nimport Themes from \"../common/config\";\nimport GetTheme from \"./getTheme\";\n\nexport default function () {\n    extend(Page.prototype, \"init\", SetTheme);\n\n    if (TagsPage) {\n        extend(TagsPage.prototype, \"config\", SetTheme);\n    }\n}\n\nexport function SetTheme() {\n    const { user } = app.session;\n\n    if (!user) {\n        // Default to automatic theme when visiting as guest\n        SetThemeFromID(Themes.DEFAULT(app));\n        return;\n    }\n\n    const PerDevice = user.preferences().fofNightMode_perDevice;\n\n    if (PerDevice) {\n        fixInvalidThemeSetting();\n    }\n\n    const CurrentTheme = GetTheme(user);\n\n    SetThemeFromID(CurrentTheme);\n}\n\nexport function SetThemeFromID(theme) {\n    switch (theme) {\n        case Themes.AUTO: // auto\n            setAuto();\n            break;\n        case Themes.LIGHT: // light\n            setLight();\n            break;\n        case Themes.DARK: // dark\n            setDark();\n            break;\n\n        default:\n            setAuto();\n            break;\n    }\n}\n\n/*\n    We need to forcefully remove unused dark classes when switching theme as\n    this function *could* be called from the Settings page where a dark theme\n    is already chosen, and we're meant to be switching to a light theme.\n*/\n\nfunction setAuto() {\n    if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n        setDark();\n    } else {\n        setLight();\n    }\n}\n\nfunction setLight() {\n    $(\"body\").removeClass(\"dark\");\n}\n\nfunction setDark() {\n    $(\"body\").addClass(\"dark\");\n}\n","import { extend } from \"flarum/extend\";\n\nimport SettingsPage from \"flarum/components/SettingsPage\";\n\nimport LoadingIndicator from \"flarum/components/LoadingIndicator\";\nimport Select from \"flarum/components/Select\";\nimport FieldSet from \"flarum/components/FieldSet\";\nimport Switch from \"flarum/components/Switch\";\n\nimport { SetTheme } from \"./setSelectedTheme\";\nimport fixInvalidThemeSetting from \"./fixInvalidThemeSetting\";\nimport GetTheme from \"./getTheme\";\nimport { Themes, Constants } from \"../common/config\";\n\nconst LocalStorageKey = Constants.localStorageKey;\n\nexport default function () {\n    extend(SettingsPage.prototype, \"settingsItems\", function (items) {\n        const { user } = app.session;\n\n        const PerDevice = user.preferences().fofNightMode_perDevice\n            ? user.preferences().fofNightMode_perDevice\n            : false;\n\n        if (PerDevice) {\n            fixInvalidThemeSetting();\n        }\n\n        const CurrentTheme = GetTheme(user);\n\n        items.add(\n            \"fof-nightmode\",\n            FieldSet.component({\n                label: app.translator.trans(\n                    \"fof-nightmode.forum.user.settings.heading\"\n                ),\n                className: \"Settings-theme\",\n                children: [\n                    <p className=\"description\">\n                        {app.translator.trans(\n                            \"fof-nightmode.forum.user.settings.description\"\n                        )}\n                    </p>,\n                    <p className=\"description\">\n                        {app.translator.trans(\n                            \"fof-nightmode.forum.user.settings.description2\"\n                        )}\n                    </p>,\n                    Switch.component({\n                        children: app.translator.trans(\n                            \"fof-nightmode.forum.user.settings.device_specific_setting_checkbox\"\n                        ),\n                        className: \"Settings-theme--per_device_cb\",\n                        state: PerDevice,\n                        onchange: (checked) => {\n                            if (checked) {\n                                // save current theme as this device's default\n                                localStorage.setItem(\n                                    LocalStorageKey,\n                                    CurrentTheme\n                                );\n                            }\n\n                            user.savePreferences({\n                                fofNightMode_perDevice: checked,\n                            }).then(() => {\n                                if (checked) {\n                                    // need to force-update selected theme (as it's only set\n                                    // on a page load and redraw doesn't count as a page load)\n                                    SetTheme();\n                                } else {\n                                    // set user theme to that of current device\n                                    user.savePreferences({\n                                        fofNightMode: CurrentTheme,\n                                    }).then(() => {\n                                        // need to force-update selected theme (as it's only set\n                                        // on a page load and redraw doesn't count as a page load)\n                                        SetTheme();\n                                    });\n                                }\n                            });\n                        },\n                    }),\n                    Select.component({\n                        value: CurrentTheme\n                            ? CurrentTheme\n                            : Themes.DEFAULT(app),\n                        label: \"test\",\n                        key: \"selected_theme\",\n                        className: \"Settings-theme--input\",\n                        onchange: (e) => {\n                            if (PerDevice) {\n                                localStorage.setItem(LocalStorageKey, e);\n                                m.redraw();\n                                SetTheme();\n                                return;\n                            }\n\n                            user.savePreferences({\n                                fofNightMode_themeType: e,\n                            }).then(() => {\n                                m.redraw();\n\n                                // need to force-update selected theme (as it's only set\n                                // on a page load and redraw doesn't count as a apge load)\n                                SetTheme();\n                            });\n                        },\n                        options: [\n                            app.translator.trans(\n                                \"fof-nightmode.forum.user.settings.options.auto\"\n                            ),\n                            app.translator.trans(\n                                \"fof-nightmode.forum.user.settings.options.day\"\n                            ),\n                            app.translator.trans(\n                                \"fof-nightmode.forum.user.settings.options.night\"\n                            ),\n                        ],\n                    }),\n                    <p className=\"Settings-theme--selection_description\">\n                        {CurrentTheme === Themes.AUTO\n                            ? app.translator.trans(\n                                  \"fof-nightmode.forum.user.settings.option_descriptions.auto\"\n                              )\n                            : CurrentTheme === Themes.LIGHT\n                            ? app.translator.trans(\n                                  \"fof-nightmode.forum.user.settings.option_descriptions.day\"\n                              )\n                            : CurrentTheme === Themes.DARK\n                            ? app.translator.trans(\n                                  \"fof-nightmode.forum.user.settings.option_descriptions.night\"\n                              )\n                            : // prevents nasty paragraph switching\n                              LoadingIndicator.component()}\n                    </p>,\n                ],\n            })\n        );\n    });\n}\n","import app from 'flarum/app';\n\nimport addSettingsItems from './addSettingsItems';\nimport setSelectedTheme from './setSelectedTheme';\n\napp.initializers.add('fof-nightmode', (app) => {\n    addSettingsItems();\n    setSelectedTheme();\n});\n"],"sourceRoot":""}